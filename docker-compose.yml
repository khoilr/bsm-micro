version: '3'

services:
    rabbitmq:
        hostname: ${RABBITMQ_HOST}
        image: 'rabbitmq:3-management'
        ports:
            - ${RABBITMQ_MAPPED_PORT}:${RABBITMQ_PORT}
            - ${RABBITMQ_MAPPED_MANAGEMENT_PORT}:${RABBITMQ_MANAGEMENT_PORT}
        healthcheck:
            test: [ 'CMD', 'rabbitmq-diagnostics', 'status' ]
            interval: 20s
            timeout: 10s
            retries: 10
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
            RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
        networks:
            - bsm-micro

    camera-frame-capture:
        restart: always
        build:
            context: camera-frame-capture
        depends_on:
            rabbitmq:
                condition: service_healthy
        environment:
            RABBITMQ_HOST: ${RABBITMQ_HOST}
            RABBITMQ_PORT: ${RABBITMQ_PORT}
            RABBITMQ_USERNAME: ${RABBITMQ_USER}
            RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
            RABBITMQ_VHOST: ${RABBITMQ_VHOST}
            RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE}
            RABBITMQ_EXCHANGE_TYPE: ${RABBITMQ_EXCHANGE_TYPE}
            RABBITMQ_HEARTBEAT: ${RABBITMQ_HEARTBEAT}
            CAMERA_URL: ${CAMERA_URL}
            CAMERA_INFO: ${CAMERA_INFO}
        networks:
            - bsm-micro

    blob:
        hostname: ${BLOB_HOST}
        restart: always
        build:
            context: blob
        ports:
            - ${BLOB_MAPPED_PORT}:${BLOB_PORT}
        networks:
            - bsm-micro
        volumes:
            - ./blob/uploads:/uploads

    face-identification-db:
        hostname: ${FACE_IDENTIFICATION_DB_HOST}
        image: postgres
        restart: always
        environment:
            POSTGRES_USER: ${FACE_IDENTIFICATION_DB_USER}
            POSTGRES_PASSWORD: ${FACE_IDENTIFICATION_DB_PASSWORD}
            POSTGRES_DB: ${FACE_IDENTIFICATION_DB_NAME}
        ports:
            - ${FACE_IDENTIFICATION_DB_MAPPED_PORT}:${FACE_IDENTIFICATION_DB_PORT}
        networks:
            - bsm-micro
        healthcheck:
            test: [ 'CMD', 'pg_isready', '-U', 'postgres' ]
            interval: 20s
            timeout: 10s
            retries: 10

    face-identification-migrator:
        build:
            context: face-identification
            dockerfile: dockerfile.migrator
        depends_on:
            face-identification-db:
                condition: service_healthy
        environment:
            POSTGRES_HOST: ${FACE_IDENTIFICATION_DB_HOST}
            POSTGRES_PORT: ${FACE_IDENTIFICATION_DB_PORT}
            POSTGRES_USER: ${FACE_IDENTIFICATION_DB_USER}
            POSTGRES_PASSWORD: ${FACE_IDENTIFICATION_DB_PASSWORD}
            POSTGRES_DB: ${FACE_IDENTIFICATION_DB_NAME}
        networks:
            - bsm-micro

    face-identification:
        restart: always
        build:
            context: face-identification
        depends_on:
            rabbitmq:
                condition: service_healthy
            face-identification-db:
                condition: service_healthy
            face-identification-migrator:
                condition: service_completed_successfully
        environment:
            RABBITMQ_HOST: ${RABBITMQ_HOST}
            RABBITMQ_PORT: ${RABBITMQ_PORT}
            RABBITMQ_USER: ${RABBITMQ_USER}
            RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
            RABBITMQ_VHOST: ${RABBITMQ_VHOST}
            RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE}
            RABBITMQ_HEARTBEAT_TIMEOUT: ${FACE_IDENTIFICATION_HOST_HEARTBEAT}
            POSTGRES_HOST: ${FACE_IDENTIFICATION_DB_HOST}
            POSTGRES_PORT: ${FACE_IDENTIFICATION_DB_PORT}
            POSTGRES_USER: ${FACE_IDENTIFICATION_DB_USER}
            POSTGRES_PASSWORD: ${FACE_IDENTIFICATION_DB_PASSWORD}
            POSTGRES_DB: ${FACE_IDENTIFICATION_DB_NAME}
            BLOB_HOST: ${BLOB_HOST}
            BLOB_PORT: ${BLOB_PORT}
        networks:
            - bsm-micro

    gateway-api-db:
        hostname: ${GATEWAY_API_DB_HOST}
        image: postgres
        ports:
            - ${GATEWAY_API_DB_MAPPED_PORT}:${GATEWAY_API_DB_PORT}
        networks:
            - bsm-micro
        environment:
            POSTGRES_USER: ${GATEWAY_API_DB_USER}
            POSTGRES_PASSWORD: ${GATEWAY_API_DB_PASS}
            POSTGRES_DB: ${GATEWAY_API_DB_NAME}
        healthcheck:
            test: [ 'CMD', 'pg_isready', '-U', 'postgres' ]
            interval: 20s
            timeout: 10s
            retries: 10

    gateway-api-migrator:
        build:
            context: gateway-api
            dockerfile: dockerfile.migrator
        environment:
            BSM_SERVER_DB_HOST: ${GATEWAY_API_DB_HOST}
            BSM_SERVER_DB_PORT: ${GATEWAY_API_DB_PORT}
            BSM_SERVER_DB_USER: ${GATEWAY_API_DB_USER}
            BSM_SERVER_DB_PASS: ${GATEWAY_API_DB_PASS}
            BSM_SERVER_DB_BASE: ${GATEWAY_API_DB_NAME}
        depends_on:
            gateway-api-db:
                condition: service_healthy
        networks:
            - bsm-micro

    gateway-api:
        restart: always
        build:
            context: gateway-api
        ports:
            - ${GATEWAY_API_MAPPED_PORT}:${GATEWAY_API_PORT}
        depends_on:
            rabbitmq:
                condition: service_healthy
            gateway-api-db:
                condition: service_healthy
            gateway-api-migrator:
                condition: service_completed_successfully
        environment:
            BSM_SERVER_RABBITMQ_HOST: ${RABBITMQ_HOST}
            BSM_SERVER_RABBITMQ_PORT: ${RABBITMQ_PORT}
            BSM_SERVER_RABBITMQ_USER: ${RABBITMQ_USER}
            BSM_SERVER_RABBITMQ_PASS: ${RABBITMQ_PASSWORD}
            BSM_SERVER_RABBITMQ_VHOST: ${RABBITMQ_VHOST}
            BSM_SERVER_RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE}
            BSM_SERVER_RABBITMQ_HEARTBEAT_TIMEOUT: ${GATEWAY_API_HOST_HEARTBEAT}
            BSM_SERVER_DB_HOST: ${GATEWAY_API_DB_HOST}
            BSM_SERVER_DB_PORT: ${GATEWAY_API_DB_PORT}
            BSM_SERVER_DB_USER: ${GATEWAY_API_DB_USER}
            BSM_SERVER_DB_PASS: ${GATEWAY_API_DB_PASS}
            BSM_SERVER_DB_BASE: ${GATEWAY_API_DB_NAME}
        networks:
            - bsm-micro

networks:
    bsm-micro:
        driver: bridge
